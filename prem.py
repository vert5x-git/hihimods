# meta developer: @usershprot
# meta name: PremiumAutoResp
# meta version: 1.1
# meta description: –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ –≤ —Å—Ç–∏–ª–µ Telegram Premium ‚ú®
# meta license: MIT
# meta copyright: ¬© 2025
# MIT License
# 
# Copyright (c) 2025 @usershprot
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND.

# –î–∞–ª–µ–µ –≤–µ—Å—å –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π —è —É–∂–µ —Ç–µ–±–µ –¥–∞–ª –≤—ã—à–µ, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å:
# from telethon.tl.types import Message
# ...async def pacmd(self, message):
        """–í–∫–ª/–≤—ã–∫–ª –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫"""
        self.config["enabled"] = not self.config["enabled"]
        status = self.strings("status_on") if self.config["enabled"] else self.strings("status_off")
        await utils.answer(message, f"<b>–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫:</b> {status}")

    async def pagcmd(self, message):
        """–í–∫–ª/–≤—ã–∫–ª –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç –≤ –≥—Ä—É–ø–ø–∞—Ö"""
        self.config["in_groups"] = not self.config["in_groups"]
        status = self.strings("status_on") if self.config["in_groups"] else self.strings("status_off")
        await utils.answer(message, f"<b>–û—Ç–≤–µ—Ç—ã –≤ –≥—Ä—É–ø–ø–∞—Ö:</b> {status}")

    async def padcmd(self, message):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É: .pad 2 6"""
        args = utils.get_args(message)
        if len(args) != 2 or not all(a.isdigit() for a in args):
            return await utils.answer(message, "<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b> <code>.pad 2 5</code>")
        self.config["delay"] = list(map(int, args))
        await utils.answer(message, f"‚úÖ –ó–∞–¥–µ—Ä–∂–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {self.config['delay']} —Å–µ–∫")

    async def pamcmd(self, message):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏:
        .pam ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å
        .pam add <—Ç–µ–∫—Å—Ç>
        .pam del <–Ω–æ–º–µ—Ä>
        .pam clear
        """
        args = utils.get_args_raw(message)
        msgs = self.config["messages"]

        if not args:
            if not msgs:
                return await utils.answer(message, "<b>–°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø—É—Å—Ç.</b>")
            out = "<b>–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã:</b>\n" + "\n".join(
                [f"<code>{i+1}.</code> {m}" for i, m in enumerate(msgs)]
            )
            return await utils.answer(message, out)

        if args.startswith("add "):
            text = args[4:].strip()
            if not text:
                return await utils.answer(message, "‚ùå –ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            msgs.append(text)
            self.config["messages"] = msgs
            return await utils.answer(message, "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ")

        if args.startswith("del "):
            try:
                index = int(args[4:]) - 1
                deleted = msgs.pop(index)
                self.config["messages"] = msgs
                return await utils.answer(message, f"üóë –£–¥–∞–ª–µ–Ω–æ: {deleted}")
            except:
                return await utils.answer(message, "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä")

        if args == "clear":
            self.config["messages"] = []
            return await utils.answer(message, "üßπ –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã")

        return await utils.answer(message, "‚ùì –ò—Å–ø–æ–ª—å–∑—É–π: .pam, add, del, clear")

    async def parcmd(self, message):
        """–í–∫–ª/–≤—ã–∫–ª —Ä–µ–∂–∏–º: 1 –æ—Ç–≤–µ—Ç –∏–ª–∏ –∫–∞–∂–¥—ã–π —Ä–∞–∑"""
        self.config["one_reply_per_user"] = not self.config["one_reply_per_user"]
        mode = "üü¢ –¢–æ–ª—å–∫–æ 1 –æ—Ç–≤–µ—Ç –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" if self.config["one_reply_per_user"] else "üîÅ –û—Ç–≤–µ—Ç –Ω–∞ –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
        await utils.answer(message, f"<b>–†–µ–∂–∏–º –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞:</b> {mode}")