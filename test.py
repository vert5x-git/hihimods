import random
import asyncio
from telethon import TelegramClient, events, Button

# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à–∏ –∑–Ω–∞—á–µ–Ω–∏—è
api_id = 26694251
api_hash = '5b041e7b70b74c095435be2b74c02abf'
bot_token = '5000594913:AAGJbliI31vdL0AkUhCsk9grA2fipApF3vo'
ADMIN_ID = 5000047781  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Telegram ID

client = TelegramClient('casino_bot', api_id, api_hash).start(bot_token=bot_token)

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_balances = {}
user_daily = {}

# –ö–æ–º–∞–Ω–¥–∞ /start
@client.on(events.NewMessage(pattern='/start'))
async def start(event):
    user_id = event.sender_id
    user_balances.setdefault(user_id, 500)  # –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
    user_daily.setdefault(user_id, False)
    await event.respond(
        "üé∞ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞–∑–∏–Ω–æ-–±–æ—Ç!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        buttons=[
            [Button.inline('üí∞ –ë–∞–ª–∞–Ω—Å', b'balance'), Button.inline('üé∞ –°–ª–æ—Ç—ã', b'slots')],
            [Button.inline('üé≤ –ö—É–±–∏–∫', b'dice'), Button.inline('üÉè –ë–ª—ç–∫–¥–∂–µ–∫', b'blackjack')],
            [Button.inline('üé° –ö–æ–ª–µ—Å–æ —Ñ–æ—Ä—Ç—É–Ω—ã', b'wheel'), Button.inline('üéÅ –ë–æ–Ω—É—Å', b'daily')],
            [Button.inline('üë§ –ü—Ä–æ—Ñ–∏–ª—å', b'profile'), Button.inline('üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤', b'top')]
        ]
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
@client.on(events.CallbackQuery)
async def callback(event):
    user_id = event.sender_id
    data = event.data.decode()

    if data == 'balance':
        balance = user_balances.get(user_id, 0)
        await event.respond(f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} StarCoins")
    elif data == 'slots':
        await play_slots(event, user_id)
    elif data == 'dice':
        await play_dice(event, user_id)
    elif data == 'blackjack':
        await play_blackjack(event, user_id)
    elif data == 'wheel':
        await play_wheel(event, user_id)
    elif data == 'daily':
        await daily_bonus(event, user_id)
    elif data == 'profile':
        await show_profile(event, user_id)
    elif data == 'top':
        await show_top(event)
    else:
        await event.respond("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")

# –ò–≥—Ä–∞: –°–ª–æ—Ç—ã
async def play_slots(event, user_id):
    if user_balances.get(user_id, 0) < 100:
        await event.respond("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –∏–≥—Ä—ã. –ù—É–∂–Ω–æ 100 StarCoins.")
        return
    user_balances[user_id] -= 100
    emojis = ['üçí', 'üçã', 'üîî', '‚≠ê', 'üíé']
    result = [random.choice(emojis) for _ in range(3)]
    await event.respond(f"üé∞ {' | '.join(result)}")
    if len(set(result)) == 1:
        winnings = 500
        user_balances[user_id] += winnings
        await event.respond(f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {winnings} StarCoins!")
    else:
        await event.respond("üò¢ –£–≤—ã, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.")

# –ò–≥—Ä–∞: –ö—É–±–∏–∫
async def play_dice(event, user_id):
    if user_balances.get(user_id, 0) < 50:
        await event.respond("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –∏–≥—Ä—ã. –ù—É–∂–Ω–æ 50 StarCoins.")
        return
    user_balances[user_id] -= 50
    user_roll = random.randint(1, 6)
    bot_roll = random.randint(1, 6)
    await event.respond(f"üé≤ –í—ã –±—Ä–æ—Å–∏–ª–∏: {user_roll}\nü§ñ –ë–æ—Ç –±—Ä–æ—Å–∏–ª: {bot_roll}")
    if user_roll > bot_roll:
        winnings = 100
        user_balances[user_id] += winnings
        await event.respond(f"üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {winnings} StarCoins!")
    elif user_roll == bot_roll:
        user_balances[user_id] += 50
        await event.respond("ü§ù –ù–∏—á—å—è! –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞.")
    else:
        await event.respond("üò¢ –£–≤—ã, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.")

# –ò–≥—Ä–∞: –ë–ª—ç–∫–¥–∂–µ–∫
async def play_blackjack(event, user_id):
    if user_balances.get(user_id, 0) < 100:
        await event.respond("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –∏–≥—Ä—ã. –ù—É–∂–Ω–æ 100 StarCoins.")
        return
    user_balances[user_id] -= 100
    user_score = random.randint(15, 21)
    dealer_score = random.randint(17, 21)
    result = f"üÉè –í–∞—à —Å—á—ë—Ç: {user_score}\nüè¢ –°—á—ë—Ç –¥–∏–ª–µ—Ä–∞: {dealer_score}\n"
    if user_score > dealer_score:
        winnings = 200
        user_balances[user_id] += winnings
        result += f"üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {winnings} StarCoins!"
    elif user_score == dealer_score:
        user_balances[user_id] += 100
        result += "ü§ù –ù–∏—á—å—è! –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞."
    else:
        result += "üò¢ –£–≤—ã, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏."
    await event.respond(result)

# –ò–≥—Ä–∞: –ö–æ–ª–µ—Å–æ —Ñ–æ—Ä—Ç—É–Ω—ã
async def play_wheel(event, user_id):
    if user_balances.get(user_id, 0) < 50:
        await event.respond("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—Ä–∞—â–µ–Ω–∏—è. –ù—É–∂–Ω–æ 50 StarCoins.")
        return
    user_balances[user_id] -= 50
    prizes = [0, 100, 200, 300, 500, 1000]
    prize = random.choice(prizes)
    user_balances[user_id] += prize
    if prize == 0:
        message = "üò¢ –£–≤—ã, –≤—ã –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–∏–≥—Ä–∞–ª–∏."
    else:
        message = f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {prize} StarCoins!"
    await event.respond(message)

# –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å
async def daily_bonus(event, user_id):
    if user_daily.get(user_id):
        await event.respond("üéÅ –í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å. –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞!")
    else:
        bonus = 200
        user_balances[user_id] += bonus
        user_daily[user_id] = True
        await event.respond(f"üéÅ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å: {bonus} StarCoins!")

# –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def show_profile(event, user_id):
    balance = user_balances.get(user_id, 0)
    daily_status = "–ü–æ–ª—É—á–µ–Ω" if user_daily.get(user_id) else "–î–æ—Å—Ç—É–ø–µ–Ω"
    profile_info = (
        f"üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
        f"üÜî ID: {user_id}\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance} StarCoins\n"
        f"üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å: {daily_status}"
    )
    await event.respond(profile_info)

# –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤
async def show_top(event):
    top_users = sorted(user_balances.items(), key=lambda x: x[1], reverse=True)[:5]
    leaderboard = "üèÜ –¢–æ–ø 5 –∏–≥—Ä–æ–∫–æ–≤:\n"
    for idx, (uid, bal) in enumerate(top_users, start=1):
        leaderboard += f"{idx}. ID {uid}: {bal} StarCoins\n"
    await event.respond(leaderboard)

# –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
@client.on(events.NewMessage(pattern='/reset_daily'))
async def reset_daily(event):
    if event.sender_id != ADMIN_ID:
        return
    for uid in user_daily:
        user_daily[uid] = False
    await event.respond("‚úÖ –°—Ç–∞—Ç—É—Å—ã –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤ —Å–±—Ä–æ—à–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

@client.on(events.NewMessage(pattern='/remove_user'))
async def remove_user(event):
    if event.sender_id != ADMIN_ID:
        return
    try:
        _, uid = event.message.text.split()
        uid = int(uid)
        user_balances.pop(uid, None)
        user_daily.pop(uid, None)
        await event.respond(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} —É–¥–∞–ª—ë–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
    except:
        await event.respond("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä: /remove_user 123456789")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
client.run_until_disconnected()