from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import random
import asyncio

API_TOKEN = '5000594913:AAGJbliI31vdL0AkUhCsk9grA2fipApF3vo'
ADMIN_ID = ADMIN_ID = 5000594913

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_balances = {}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
menu_kb = ReplyKeyboardMarkup(resize_keyboard=True)
menu_kb.add(KeyboardButton('/balance'), KeyboardButton('/slots'))
menu_kb.add(KeyboardButton('/dice'), KeyboardButton('/daily'))

# DAILY –±–æ–Ω—É—Å—ã
daily_bonus = 100
user_daily = {}

@dp.message_handler(commands=['start'])
async def start_cmd(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_balances:
        user_balances[user_id] = 500  # –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ StarSpin Casino!", reply_markup=menu_kb)

@dp.message_handler(commands=['balance'])
async def balance_cmd(message: types.Message):
    user_id = message.from_user.id
    balance = user_balances.get(user_id, 0)
    await message.answer(f"–í–∞—à –±–∞–ª–∞–Ω—Å: {balance} StarCoins")

@dp.message_handler(commands=['slots'])
async def slots_cmd(message: types.Message):
    user_id = message.from_user.id
    if user_balances.get(user_id, 0) < 500:
        return await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –∏–≥—Ä—ã. –ù—É–∂–Ω–æ 500 StarCoins.")

    user_balances[user_id] -= 500
    symbols = ['‚≠ê', '7Ô∏è‚É£', 'üî•', 'üíé']
    result = [random.choice(symbols) for _ in range(3)]
    text = ' | '.join(result)

    if len(set(result)) == 1:
        winnings = 1500
        user_balances[user_id] += winnings
        await message.answer(f"{text}\n–î–∂–µ–∫–ø–æ—Ç! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {winnings} StarCoins!")
    elif len(set(result)) == 2:
        winnings = 700
        user_balances[user_id] += winnings
        await message.answer(f"{text}\n–ù–µ–ø–ª–æ—Ö–æ! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {winnings} StarCoins!")
    else:
        await message.answer(f"{text}\n–£–≤—ã, –≤—ã –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–∏–≥—Ä–∞–ª–∏.")

@dp.message_handler(commands=['dice'])
async def dice_cmd(message: types.Message):
    user_id = message.from_user.id
    if user_balances.get(user_id, 0) < 500:
        return await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –±—Ä–æ—Å–∫–∞. –ù—É–∂–Ω–æ 500 StarCoins.")

    user_balances[user_id] -= 500
    user_throw = random.randint(1, 6)
    bot_throw = random.randint(1, 6)
    await message.answer(f"–í—ã –≤—ã–±—Ä–æ—Å–∏–ª–∏: {user_throw}\n–ö–∞–∑–∏–Ω–æ –≤—ã–±—Ä–æ—Å–∏–ª–æ: {bot_throw}")

    if user_throw > bot_throw:
        win = 1000
        user_balances[user_id] += win
        await message.answer(f"–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win} StarCoins!")
    elif user_throw == bot_throw:
        user_balances[user_id] += 500
        await message.answer("–ù–∏—á—å—è! –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞.")
    else:
        await message.answer("–£–≤—ã, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.")

@dp.message_handler(commands=['daily'])
async def daily_cmd(message: types.Message):
    user_id = message.from_user.id
    if user_daily.get(user_id):
        return await message.answer("–í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å. –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞!")

    user_balances[user_id] = user_balances.get(user_id, 0) + daily_bonus
    user_daily[user_id] = True
    await message.answer(f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ {daily_bonus} StarCoins –∫–∞–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å!")

    await asyncio.sleep(86400)  # –∂–¥–µ–º 24 —á–∞—Å–∞
    user_daily[user_id] = False

# –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è ADMIN_ID)
@dp.message_handler(commands=['admin'])
async def admin_menu(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    text = (
        "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:\n"
        "/give [user_id] [amount] ‚Äî –≤—ã–¥–∞—Ç—å –º–æ–Ω–µ—Ç—ã\n"
        "/take [user_id] [amount] ‚Äî –∑–∞–±—Ä–∞—Ç—å –º–æ–Ω–µ—Ç—ã\n"
        "/users ‚Äî —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    )
    await message.answer(text)

@dp.message_handler(lambda message: message.text.startswith('/give'))
async def admin_give(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    try:
        _, uid, amount = message.text.split()
        uid = int(uid)
        amount = int(amount)
        user_balances[uid] = user_balances.get(uid, 0) + amount
        await message.answer(f"–í—ã–¥–∞–Ω–æ {amount} StarCoins –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid}.")
    except:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä: /give 123456789 1000")

@dp.message_handler(lambda message: message.text.startswith('/take'))
async def admin_take(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    try:
        _, uid, amount = message.text.split()
        uid = int(uid)
        amount = int(amount)
        user_balances[uid] = max(0, user_balances.get(uid, 0) - amount)
        await message.answer(f"–ó–∞–±—Ä–∞–Ω–æ {amount} StarCoins —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid}.")
    except:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä: /take 123456789 500")

@dp.message_handler(commands=['users'])
async def admin_users(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    text = "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö –±–∞–ª–∞–Ω—Å—ã:\n"
    for uid, bal in user_balances.items():
        text += f"{uid}: {bal} StarCoins\n"
    await message.answer(text)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)