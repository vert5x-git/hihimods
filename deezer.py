# meta developer: @usershprot
# meta name: DeezerPlayer
# meta version: 1.0

from .. import loader, utils
import requests

class DeezerPlayerMod(loader.Module):
    """–ü—Ä–æ–∏–≥—Ä—ã–≤–∞—Ç–µ–ª—å —Ç—Ä–µ–∫–æ–≤ —á–µ—Ä–µ–∑ Deezer API"""
    strings = {
        "name": "DeezerPlayer"
    }

    _auth_token = None
    _current_track = None

    async def sauthcmd(self, message):
        """‚ñ´Ô∏è .sauth ‚Äî –ü–µ—Ä–≤—ã–π —ç—Ç–∞–ø –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–∑–∞–≥–ª—É—à–∫–∞)"""
        self._auth_token = "fake_token"
        await message.edit("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–∞—á–∞—Ç–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥: `.scode 123456`")

    async def scodecmd(self, message):
        """‚ñ´Ô∏è .scode <–∫–æ–¥> ‚Äî –í—Ç–æ—Ä–æ–π —ç—Ç–∞–ø –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–∑–∞–≥–ª—É—à–∫–∞)"""
        code = utils.get_args_raw(message)
        if self._auth_token:
            self._auth_token = f"verified_token_{code}"
            await message.edit("–£—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ Deezer!")
        else:
            await message.edit("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ `.sauth`.")

    async def unauthcmd(self, message):
        """‚ñ´Ô∏è .unauth ‚Äî –û—Ç–º–µ–Ω–∏—Ç—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é"""
        self._auth_token = None
        self._current_track = None
        await message.edit("–í—ã –≤—ã—à–ª–∏ –∏–∑ Deezer.")

    async def sfindcmd(self, message):
        """‚ñ´Ô∏è .sfind <–Ω–∞–∑–≤–∞–Ω–∏–µ> ‚Äî –ù–∞–π—Ç–∏ —Ç—Ä–µ–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
        if not self._auth_token:
            return await message.edit("–°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é `.sauth`.")

        query = utils.get_args_raw(message)
        if not query:
            return await message.edit("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞.")

        res = requests.get(f"https://api.deezer.com/search?q={query}").json()
        if not res.get("data"):
            return await message.edit("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

        track = res["data"][0]
        self._current_track = track

        text = (
            f"‚ñ∂Ô∏è <b>{track['title']}</b>\n"
            f"üé§ <i>{track['artist']['name']}</i>\n"
            f"üíΩ <code>{track['album']['title']}</code>\n"
            f"‚è± {track['duration']} —Å–µ–∫\n"
            f"<a href='{track['preview']}'>–°–ª—É—à–∞—Ç—å –ø—Ä–µ–≤—å—é</a>"
        )
        await message.edit(text, parse_mode="html", link_preview=True)

    async def snowcmd(self, message):
        """‚ñ´Ô∏è .snow ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫"""
        if not self._current_track:
            return await message.edit("–ù–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞.")
        track = self._current_track
        text = (
            f"‚ñ∂Ô∏è <b>{track['title']}</b>\n"
            f"üé§ <i>{track['artist']['name']}</i>\n"
            f"üíΩ <code>{track['album']['title']}</code>\n"
            f"<a href='{track['preview']}'>–°–ª—É—à–∞—Ç—å –ø—Ä–µ–≤—å—é</a>"
        )
        await message.edit(text, parse_mode="html", link_preview=True)

    async def splaycmd(self, message):
        """‚ñ´Ô∏è .splay ‚Äî –ü—Ä–æ–∏–≥—Ä–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫ (–ø—Ä–µ–≤—å—é)"""
        if not self._current_track:
            return await message.edit("–ù–µ—Ç —Ç—Ä–µ–∫–∞ –¥–ª—è –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏—è.")
        await message.edit("–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ–≤—å—é...")
        await message.client.send_file(
            message.chat_id,
            self._current_track["preview"],
            voice=True,
            caption=f"{self._current_track['title']} ‚Äî {self._current_track['artist']['name']}"
        )