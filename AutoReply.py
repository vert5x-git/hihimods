# meta developer: @usershprot
# meta name: PremiumAutoResp
# meta version: 1.1
# meta description: –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ 
# meta license: MIT
# meta copyright: ¬© 2025
#
# MIT License
#
# Copyright (c) 2025 @usershprot
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND.

from .. import loader, utils
from telethon.tl.custom import Button
import os
import time

class AutoReplyMod(loader.Module):
    """–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ –¥–ª—è –Ω–æ–≤—ã—Ö –õ–° —Å –±–∞–∑–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏"""

    strings = {
        "name": "PremiumAutoResp",
        "enabled": "‚úÖ –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ –≤–∫–ª—é—á—ë–Ω",
        "disabled": "‚ùå –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ –≤—ã–∫–ª—é—á–µ–Ω",
        "reply_set": "‚úçÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ",
        "image_set": "üñº –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ",
        "no_image": "‚ö†Ô∏è –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
        "arset": "‚úçÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞",
        "arimage": "üñº –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞",
        "artoggle": "üîÑ –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫",
    }

    DEFAULT_MESSAGE = (
        "‚≠êÔ∏è *–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ! (–ù–æ —Ö–æ–∑—è–∏–Ω –≤ offline...)*\n\n"
        "–ù–µ –≤–æ–ª–Ω—É–π—Ç–µ—Å—å! –í–ª–∞–¥–µ–ª–µ—Ü —Å–∫–æ—Ä–æ –≤–µ—Ä–Ω–µ—Ç—Å—è –≤ —Å–µ—Ç—å, –∞ –ø–æ–∫–∞‚Ä¶\n\n"
        "‚Ä¢ *üìñ –ß–∏—Ç–∞—Ç—å FAQ* ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, —Ç–∞–º —É–∂–µ –µ—Å—Ç—å –æ—Ç–≤–µ—Ç!\n"
        "‚Ä¢ *üí∞ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–Ω–∞—Ç* ‚Äî –∏ —É—Å–∫–æ—Ä–∏—Ç—å –æ—Ç–≤–µ—Ç!\n"
        "‚Ä¢ *‚úâ –ù–∞–ø–∏—Å–∞—Ç—å —Å–Ω–æ–≤–∞* ‚Äî –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!\n\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Ç–µ—Ä–ø–µ–Ω–∏–µ! ‚ù§Ô∏è"
    )

    DEFAULT_IMAGE_URL = "https://raw.githubusercontent.com/HelZDev/media-files/refs/heads/main/IMG_20250323_023021_126.jpg"
    REPLY_TIMEOUT = 3600

    async def client_ready(self, client, db):
        self.db = db
        self.reply_enabled = self.db.get("AutoReply", "enabled", False)
        self.reply_text = self.db.get("AutoReply", "reply_text", self.DEFAULT_MESSAGE)
        self.image_path = self.db.get("AutoReply", "image_path", None)
        self.users_db = self.db.get("AutoReply_users", {})
        if self.users_db is None:
            self.users_db = {}

    def get_inline_keyboard(self):
        return [
            [Button.url("üìñ –ß–∏—Ç–∞—Ç—å FAQ", "https://—Ç–≤–æ–π-—Å–∞–π—Ç.com/faq")],
            [Button.url("üí∞ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–Ω–∞—Ç", "https://donate.com")],
            [Button.inline("‚úâ –ù–∞–ø–∏—Å–∞—Ç—å —Å–Ω–æ–≤–∞", b"send_again")]
        ]

    async def artogglecmd(self, message):
        """üîÑ –í–∫–ª—é—á–∞–µ—Ç/–≤—ã–∫–ª—é—á–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫"""
        self.reply_enabled = not self.reply_enabled
        self.db.set("AutoReply", "enabled", self.reply_enabled)
        await utils.answer(message, self.strings["enabled"] if self.reply_enabled else self.strings["disabled"])

    async def arsetcmd(self, message):
        """‚úçÔ∏è –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞"""
        reply = await message.get_reply_message()
        text = utils.get_args_raw(message) or (reply.text if reply else None)
        
        image_path = None
        if reply and reply.media:
            image_path = os.path.join(os.getcwd(), "auto_reply.jpg")
            await reply.download_media(image_path)
        
        if not text and not image_path:
            return await utils.answer(message, "‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç/—Ñ–æ—Ç–æ –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ!")

        if text:
            self.db.set("AutoReply", "reply_text", text)
            self.reply_text = text

        if image_path:
            self.db.set("AutoReply", "image_path", image_path)
            self.image_path = image_path

        await utils.answer(message, "‚úÖ –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç –æ–±–Ω–æ–≤–ª—ë–Ω!")

    async def arimagecmd(self, message):
        """üñº –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞"""
        reply = await message.get_reply_message()
        if not reply or not reply.media:
            return await utils.answer(message, self.strings["no_image"])

        file_path = os.path.join(os.getcwd(), "auto_reply.jpg")
        await reply.download_media(file_path)

        self.db.set("AutoReply", "image_path", file_path)
        self.image_path = file_path
        await utils.answer(message, self.strings["image_set"])

    async def watcher(self, message):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç –≤ –Ω–æ–≤—ã—Ö –õ–° (–∫—Ä–æ–º–µ –±–æ—Ç–æ–≤) –æ–¥–∏–Ω —Ä–∞–∑, —Å–±—Ä–∞—Å—ã–≤–∞—è —Å–ø–∏—Å–æ–∫ —á–µ—Ä–µ–∑ —á–∞—Å"""
        if not self.reply_enabled or not message.is_private or message.out:
            return

        user = await message.get_sender()
        if user is None or user.bot:
            return

        user_id = message.chat_id
        current_time = time.time()

        if self.users_db is None:
            self.users_db = {}

        user_data = self.users_db.get(user_id, {"count": 0, "last_reply": 0})
        
        if current_time - user_data.get("last_reply", 0) < self.REPLY_TIMEOUT:
            return

        await message.client.send_file(
            user_id,
            self.image_path if self.image_path else self.DEFAULT_IMAGE_URL,
            caption=self.reply_text,
            buttons=self.get_inline_keyboard(),
            parse_mode="MarkdownV2"
        )

        user_data["count"] = user_data.get("count", 0) + 1
        user_data["last_reply"] = current_time
        self.users_db[user_id] = user_data
        self.db.set("AutoReply_users", self.users_db)

    @loader.inline_handler()
    async def inline_button_handler(self, call):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ "–ù–∞–ø–∏—Å–∞—Ç—å —Å–Ω–æ–≤–∞" """
        if call is None or call.data is None:
            return
        if call.data == b"send_again":
            await call.answer("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–Ω–æ–≤–∞!", alert=True)