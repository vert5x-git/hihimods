import telebot
from telebot import types
import time
import sqlite3

TOKEN = '7718204976:AAGhQNlS9ulnqj_SatBQucQTsABVnOE9Co0'
ADMIN_IDS = [6450469685]
SUPPORT_CHAT_ID = -4805465459

bot = telebot.TeleBot(TOKEN)

def init_db():
    conn = sqlite3.connect('support_bot.db')
    cursor = conn.cursor()
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        first_name TEXT,
        last_name TEXT,
        registration_date TEXT
    )
    ''')
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS tickets (
        ticket_id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        question TEXT,
        status TEXT DEFAULT 'open',
        created_at TEXT,
        admin_id INTEGER,
        FOREIGN KEY (user_id) REFERENCES users (user_id)
    ''')
    conn.commit()
    conn.close()

init_db()

@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    
    conn = sqlite3.connect('support_bot.db')
    cursor = conn.cursor()
    cursor.execute('INSERT OR IGNORE INTO users (user_id, username, first_name, last_name, registration_date) VALUES (?, ?, ?, ?, ?)',
                   (user_id, username, first_name, last_name, time.strftime('%Y-%m-%d %H:%M:%S')))
    conn.commit()
    conn.close()
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("üì® –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
    btn2 = types.KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å")
    markup.add(btn1, btn2)
    
    bot.send_message(message.chat.id, f"üëã –ü—Ä–∏–≤–µ—Ç, {first_name}!\n\n–Ø –±–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –¢—ã –º–æ–∂–µ—à—å –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "üì® –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
def ask_question(message):
    msg = bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:")
    bot.register_next_step_handler(msg, process_question)

def process_question(message):
    user_id = message.from_user.id
    question = message.text
    
    conn = sqlite3.connect('support_bot.db')
    cursor = conn.cursor()
    cursor.execute('INSERT INTO tickets (user_id, question, created_at) VALUES (?, ?, ?)',
                   (user_id, question, time.strftime('%Y-%m-%d %H:%M:%S')))
    ticket_id = cursor.lastrowid
    conn.commit()
    
    cursor.execute('SELECT username, first_name, last_name FROM users WHERE user_id = ?', (user_id,))
    user_info = cursor.fetchone()
    conn.close()
    
    username, first_name, last_name = user_info if user_info else (None, None, None)
    user_name = f"@{username}" if username else f"{first_name} {last_name}" if first_name or last_name else f"ID: {user_id}"
    
    for admin_id in ADMIN_IDS:
        try:
            bot.send_message(admin_id, f"üì® –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å (#{ticket_id}) –æ—Ç {user_name}:\n\n{question}\n\n–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
    
    if SUPPORT_CHAT_ID:
        try:
            bot.send_message(SUPPORT_CHAT_ID, f"üì® –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å (#{ticket_id}) –æ—Ç {user_name}:\n\n{question}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {e}")
    
    bot.send_message(message.chat.id, "‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")

@bot.message_handler(func=lambda message: message.reply_to_message and message.from_user.id in ADMIN_IDS)
def handle_admin_reply(message):
    try:
        original_text = message.reply_to_message.text
        if "–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å (#" in original_text:
            ticket_id = int(original_text.split('(#')[1].split(')')[0])
            original_question = original_text.split(':\n\n')[1].split('\n\n–û—Ç–≤–µ—Ç—å—Ç–µ')[0]
            
            conn = sqlite3.connect('support_bot.db')
            cursor = conn.cursor()
            cursor.execute('UPDATE tickets SET status = ?, admin_id = ? WHERE ticket_id = ?',
                         ('closed', message.from_user.id, ticket_id))
            
            cursor.execute('SELECT user_id FROM tickets WHERE ticket_id = ?', (ticket_id,))
            user_id = cursor.fetchone()[0]
            conn.commit()
            conn.close()
            
            try:
                bot.send_message(user_id, f"üì© –û—Ç–≤–µ—Ç –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n\n‚ùì –í–∞—à –≤–æ–ø—Ä–æ—Å: {original_question}\n\nüí¨ –û—Ç–≤–µ—Ç: {message.text}")
                bot.send_message(message.chat.id, "‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
            except Exception as e:
                bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.")
        else:
            bot.send_message(message.chat.id, "–≠—Ç–æ –Ω–µ –≤–æ–ø—Ä–æ—Å –ø–æ–¥–¥–µ—Ä–∂–∫–∏.")
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {e}")

@bot.message_handler(commands=['help'])
@bot.message_handler(func=lambda message: message.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
def send_help(message):
    bot.send_message(message.chat.id, "‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞:\n\n‚Ä¢ –ù–∞–∂–º–∏—Ç–µ 'üì® –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å' –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É\n‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –æ—Ç–≤–µ—Ç—è—Ç –≤ –ø–æ—Ä—è–¥–∫–µ –æ—á–µ—Ä–µ–¥–∏")

@bot.message_handler(commands=['stats'])
def send_stats(message):
    if message.from_user.id not in ADMIN_IDS:
        bot.send_message(message.chat.id, "‚õî –ù–µ—Ç –ø—Ä–∞–≤.")
        return
    
    conn = sqlite3.connect('support_bot.db')
    cursor = conn.cursor()
    
    cursor.execute('SELECT COUNT(*) FROM users')
    total_users = cursor.fetchone()[0]
    
    cursor.execute('SELECT COUNT(*) FROM tickets')
    total_tickets = cursor.fetchone()[0]
    
    cursor.execute('SELECT COUNT(*) FROM tickets WHERE status = "open"')
    open_tickets = cursor.fetchone()[0]
    
    stats_text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n‚Ä¢ –û–±—Ä–∞—â–µ–Ω–∏–π: {total_tickets}\n‚Ä¢ –û—Ç–∫—Ä—ã—Ç–æ: {open_tickets}\n\n"
    
    if open_tickets > 0:
        cursor.execute('SELECT t.ticket_id, t.question, u.user_id, u.username FROM tickets t JOIN users u ON t.user_id = u.user_id WHERE t.status = "open" ORDER BY t.created_at DESC LIMIT 5')
        open_tickets_list = cursor.fetchall()
        
        stats_text += "üì® –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ:\n"
        for ticket in open_tickets_list:
            ticket_id, question, user_id, username = ticket
            username = f"@{username}" if username else f"ID: {user_id}"
            stats_text += f"#{ticket_id} –æ—Ç {username}: {question[:50]}...\n"
    
    conn.close()
    bot.send_message(message.chat.id, stats_text)

if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.infinity_polling()